name: main
on:
  workflow_call:
    secrets:
      GIT_TOKEN:
        required: true
      NPM_TOKEN:
        required: true
    inputs:
      serviceName:
        description: "The qualified cluster name for the service. (EX: frontend-issues)"
        required: true
        type: string
      prodReplicas:
        description: "How many pods for this service on Prod? (number, defaults 3)"
        default: 3
        required: false
        type: number
      cleanCheckout:
        description: "Whether to prefer a clean checkout (debug purposes)"
        default: false
        required: false
        type: boolean
env:
  SERVICE: ${{ inputs.serviceName }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
  AXIOS_DNS_DISABLE: "true"
jobs:
  version:
    runs-on: [self-hosted, frontend]
    outputs:
      value: ${{ steps.version.outputs.value }}
    steps:
      - id: version
        run: echo "::set-output name=value::$(usafacts version)"
  build:
    runs-on: [self-hosted, frontend]
    needs: [version]
    env:
      VERSION: ${{needs.version.outputs.value}}
      CI: false
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          clean: ${{inputs.cleanCheckout}}
          token: ${{secrets.GIT_TOKEN}}
      - name: Node
        uses: actions/setup-node@v2
        with:
          node-version: "14"
          registry-url: "https://registry.npmjs.org"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Install
        run: npm install --legacy-peer-deps
      - name: Build
        run: npm run build
      - name: Manifests
        uses: actions/upload-artifact@v2
        with:
          name: manifests
          path: manifests
      - name: Container
        run: usafacts container -r ${SERVICE}
  tag:
    runs-on: [self-hosted, frontend]
    needs: [version, build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          clean: ${{inputs.cleanCheckout}}
          token: ${{secrets.GIT_TOKEN}}
      - name: Release
        uses: actions/github-script@v5.0.0
        with:
          script: |
            const tag = "${{needs.version.outputs.value}}";
            const message = `version ${tag}`;
            const createTagResponse = await github.rest.git.createTag({
              ...context.repo,
              tag: tag,
              message: message,
              object: context.sha,
              type: "commit"
            })
            await github.rest.git.createRef({
              ...context.repo,
              ref: `refs/tags/${tag}`,
              sha: createTagResponse.data.sha
            })
            await github.rest.repos.createRelease({
              ...context.repo,
              tag_name: tag,
              name: 'Version ' + tag,
              generate_release_notes: true
            });
  dev:
    runs-on: [self-hosted, deploy]
    needs: [version, build]
    environment: dev
    env:
      VERSION: ${{needs.version.outputs.value}}
      ENVIRONMENT: dev
      REPLICAS: 2
      NEW_RELIC_ENABLED: false
    steps:
      - name: Manifests
        uses: actions/download-artifact@v2
        with:
          name: manifests
      - name: Deploy
        run: usafacts deploy -e ${ENVIRONMENT} -f deployment.yml -n ${SERVICE}
  qa:
    runs-on: [self-hosted, deploy]
    needs: [version, build, dev]
    environment: qa
    env:
      VERSION: ${{needs.version.outputs.value}}
      ENVIRONMENT: qa
      REPLICAS: 2
      NEW_RELIC_ENABLED: false
    steps:
      - name: Manifests
        uses: actions/download-artifact@v2
        with:
          name: manifests
      - name: Deploy
        run: usafacts deploy -e ${ENVIRONMENT} -f deployment.yml -n ${SERVICE}
  prod:
    runs-on: [self-hosted, deploy]
    needs: [version, build, dev, qa]
    environment: prod
    env:
      VERSION: ${{needs.version.outputs.value}}
      ENVIRONMENT: prod
      REPLICAS: ${{ inputs.prodReplicas }}
      NEW_RELIC_ENABLED: true
    steps:
      - name: Manifests
        uses: actions/download-artifact@v2
        with:
          name: manifests
      - name: Deploy
        run: usafacts deploy -e ${ENVIRONMENT} -f deployment.yml -n ${SERVICE}
  post-prod:
    runs-on: ubuntu-latest
    needs: [version, build, prod]
    steps:
      - name: NR Deploy Marker
        continue-on-error: true
        uses: newrelic/deployment-marker-action@v1
        env:
          NEWRELIC_APP_ID: ${{ secrets.NEWRELIC_APP_ID }}
        if: env.NEWRELIC_APP_ID != null
        with:
          apiKey: ${{ secrets.NEWRELIC_USERKEY_ANTHONY }}
          accountId: ${{ secrets.NEWRELIC_ACCOUNT_ID }}
          applicationId: ${{ secrets.NEWRELIC_APP_ID }}
          revision: ${{needs.version.outputs.value}}
